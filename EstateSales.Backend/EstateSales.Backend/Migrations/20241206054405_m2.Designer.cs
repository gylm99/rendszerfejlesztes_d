// <auto-generated />
using System;
using EstateSales.Backend.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EstateSales.Backend.Migrations
{
    [DbContext(typeof(EstateMySqlContext))]
    [Migration("20241206054405_m2")]
    partial class m2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("EstateSales.Backend.Datas.Entities.Advertisement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double>("BaseArea")
                        .HasColumnType("double");

                    b.Property<int>("BuiltYear")
                        .HasColumnType("int");

                    b.Property<string>("Confort")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("FloorLevel")
                        .HasColumnType("int");

                    b.Property<bool>("HasElevator")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MainBuildingFloorLevel")
                        .HasColumnType("int");

                    b.Property<string>("Orientation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Advertisements");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4b910331-6bd9-46f9-9f9b-7a89eff7fe94"),
                            BaseArea = 75.5,
                            BuiltYear = 2010,
                            Confort = "Luxus",
                            Description = "Tágas, világos lakás remek közlekedéssel.",
                            FloorLevel = 2,
                            HasElevator = true,
                            MainBuildingFloorLevel = 4,
                            Orientation = "Dél",
                            Price = 45000000.0,
                            RoomNumber = 3,
                            Title = "Modern lakás a belvárosban"
                        },
                        new
                        {
                            Id = new Guid("7bd112da-6095-4958-a5d8-0658d3acdf71"),
                            BaseArea = 120.0,
                            BuiltYear = 2005,
                            Confort = "Komfortos",
                            Description = "Csendes környék, nagy kerttel.",
                            FloorLevel = 0,
                            HasElevator = false,
                            MainBuildingFloorLevel = 1,
                            Orientation = "Nyugat",
                            Price = 85000000.0,
                            RoomNumber = 4,
                            Title = "Családi ház kertvárosi övezetben"
                        },
                        new
                        {
                            Id = new Guid("70602bc9-41cc-42a7-89cf-3084c5bcd328"),
                            BaseArea = 50.0,
                            BuiltYear = 1980,
                            Confort = "Alap",
                            Description = "Kiváló befektetési lehetőség a belvárosban.",
                            FloorLevel = 3,
                            HasElevator = false,
                            MainBuildingFloorLevel = 5,
                            Orientation = "Észak",
                            Price = 30000000.0,
                            RoomNumber = 2,
                            Title = "Felújítandó lakás"
                        },
                        new
                        {
                            Id = new Guid("a462b0d3-e69b-491f-9c1c-9b582a796e04"),
                            BaseArea = 200.0,
                            BuiltYear = 2022,
                            Confort = "Extra luxus",
                            Description = "Luxus szintű lakás panorámás kilátással.",
                            FloorLevel = 5,
                            HasElevator = true,
                            MainBuildingFloorLevel = 5,
                            Orientation = "Kelet-Dél",
                            Price = 150000000.0,
                            RoomNumber = 5,
                            Title = "Új építésű penthouse"
                        });
                });

            modelBuilder.Entity("EstateSales.Backend.Datas.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SenderEmailAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe0d043f-4b40-41d2-9657-ed703749a946"),
                            Content = "Szia Elek!\nÉrdekel a házad!",
                            CreatedAt = new DateTime(2024, 12, 6, 6, 44, 5, 648, DateTimeKind.Local).AddTicks(8534),
                            SenderEmailAddress = "mirmur@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("9ebcab83-7fca-4db9-ae57-a0b57fbda7bf"),
                            Content = "Szia Eszter!\nÉrdekel a házad!",
                            CreatedAt = new DateTime(2024, 12, 6, 6, 44, 5, 648, DateTimeKind.Local).AddTicks(8581),
                            SenderEmailAddress = "frakk@gmail.com"
                        });
                });

            modelBuilder.Entity("EstateSales.Backend.Datas.Entities.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AdvertisementId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AdvertisementId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("EstateSales.Backend.Datas.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d938ba9e-155d-4190-9e04-0c0e9814a0bc"),
                            Email = "mekk@mek.com",
                            Name = "Mekk Elek",
                            Number = "+36/309025476",
                            Password = "mekmek"
                        },
                        new
                        {
                            Id = new Guid("f3c8aef9-4c0c-4786-bc76-85c419dfe39a"),
                            Email = "teszt@teszt.com",
                            Name = "Teszt Eszter",
                            Number = "+36-20-735-2742",
                            Password = "teszt"
                        });
                });

            modelBuilder.Entity("EstateSales.Backend.Datas.Entities.Advertisement", b =>
                {
                    b.HasOne("EstateSales.Backend.Datas.Entities.User", "User")
                        .WithMany("Advertisements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("EstateSales.Backend.Datas.Entities.Message", b =>
                {
                    b.HasOne("EstateSales.Backend.Datas.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("EstateSales.Backend.Datas.Entities.Photo", b =>
                {
                    b.HasOne("EstateSales.Backend.Datas.Entities.Advertisement", "Advertisement")
                        .WithMany("Photos")
                        .HasForeignKey("AdvertisementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Advertisement");
                });

            modelBuilder.Entity("EstateSales.Backend.Datas.Entities.Advertisement", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("EstateSales.Backend.Datas.Entities.User", b =>
                {
                    b.Navigation("Advertisements");

                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
